[{"D:\\rimac\\src\\index.tsx":"1","D:\\rimac\\src\\reportWebVitals.ts":"2","D:\\rimac\\src\\App.tsx":"3","D:\\rimac\\src\\utils\\services.ts":"4","D:\\rimac\\src\\containers\\router\\router.tsx":"5","D:\\rimac\\src\\containers\\home\\home.tsx":"6","D:\\rimac\\src\\containers\\add-familiars\\add-familiars.tsx":"7","D:\\rimac\\src\\containers\\choose-plan\\choose-plan.tsx":"8","D:\\rimac\\src\\components\\atoms\\checkbox\\checkbox.tsx":"9","D:\\rimac\\src\\components\\atoms\\radio\\radio.tsx":"10","D:\\rimac\\src\\components\\atoms\\input\\input.tsx":"11","D:\\rimac\\src\\components\\atoms\\button\\button.tsx":"12","D:\\rimac\\src\\components\\molecules\\benefits\\benefits.tsx":"13","D:\\rimac\\src\\components\\atoms\\select-input\\select-input.tsx":"14","D:\\rimac\\src\\constants\\relatives.ts":"15","D:\\rimac\\src\\components\\atoms\\layout\\layout.tsx":"16","D:\\rimac\\src\\constants\\documentTypes.ts":"17","D:\\rimac\\src\\components\\atoms\\back-step\\back-step.tsx":"18","D:\\rimac\\src\\components\\atoms\\header-text\\header-text.tsx":"19","D:\\rimac\\src\\components\\atoms\\text\\text.tsx":"20","D:\\rimac\\src\\utils\\validation.ts":"21","D:\\rimac\\src\\components\\organisms\\plans\\plans.tsx":"22","D:\\rimac\\src\\components\\organisms\\footer-plan\\footer-plan.tsx":"23","D:\\rimac\\src\\components\\organisms\\resume-plans\\resume-plans.tsx":"24","D:\\rimac\\src\\components\\organisms\\detail-plan\\detail-plan.tsx":"25","D:\\rimac\\src\\containers\\final-step\\final-step.tsx":"26"},{"size":500,"mtime":499162500000,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":499162500000,"results":"29","hashOfConfig":"28"},{"size":167,"mtime":1616626255536,"results":"30","hashOfConfig":"28"},{"size":984,"mtime":1616642857974,"results":"31","hashOfConfig":"28"},{"size":1212,"mtime":1616650761408,"results":"32","hashOfConfig":"28"},{"size":4191,"mtime":1616642999308,"results":"33","hashOfConfig":"28"},{"size":7998,"mtime":1616644373703,"results":"34","hashOfConfig":"28"},{"size":1613,"mtime":1616650789262,"results":"35","hashOfConfig":"28"},{"size":522,"mtime":1611550573092,"results":"36","hashOfConfig":"28"},{"size":375,"mtime":1616628922955,"results":"37","hashOfConfig":"28"},{"size":579,"mtime":1611551873806,"results":"38","hashOfConfig":"28"},{"size":405,"mtime":1611534406077,"results":"39","hashOfConfig":"28"},{"size":2191,"mtime":1616626977414,"results":"40","hashOfConfig":"28"},{"size":975,"mtime":1611553243803,"results":"41","hashOfConfig":"28"},{"size":118,"mtime":1616630184518,"results":"42","hashOfConfig":"28"},{"size":2004,"mtime":1616634661049,"results":"43","hashOfConfig":"28"},{"size":166,"mtime":1616632353943,"results":"44","hashOfConfig":"28"},{"size":789,"mtime":1616638049047,"results":"45","hashOfConfig":"28"},{"size":598,"mtime":1616642026132,"results":"46","hashOfConfig":"28"},{"size":235,"mtime":1616641174905,"results":"47","hashOfConfig":"28"},{"size":231,"mtime":1616642989683,"results":"48","hashOfConfig":"28"},{"size":1339,"mtime":1616650036070,"results":"49","hashOfConfig":"28"},{"size":561,"mtime":1616649708770,"results":"50","hashOfConfig":"28"},{"size":527,"mtime":1616650159039,"results":"51","hashOfConfig":"28"},{"size":225,"mtime":1616650146550,"results":"52","hashOfConfig":"28"},{"size":1108,"mtime":1616650918878,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"72l1ea",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\rimac\\src\\index.tsx",[],["111","112"],"D:\\rimac\\src\\reportWebVitals.ts",[],"D:\\rimac\\src\\App.tsx",[],"D:\\rimac\\src\\utils\\services.ts",[],"D:\\rimac\\src\\containers\\router\\router.tsx",[],"D:\\rimac\\src\\containers\\home\\home.tsx",["113"],"import React from 'react';\nimport './home.scss';\nimport { Field, Form } from 'react-final-form';\nimport Input from '../../components/atoms/input/input';\nimport Benefits from '../../components/molecules/benefits/benefits';\nimport Button from '../../components/atoms/button/button';\nimport Checkbox from '../../components/atoms/checkbox/checkbox';\nimport { useHistory } from 'react-router-dom';\nimport { getPersonalData } from '../../utils/services';\nimport { PersonalData } from '../../models/personal-data';\nimport SelectInput from '../../components/atoms/select-input/select-input';\nimport Layout from '../../components/atoms/layout/layout';\nimport { DOCUMENT_TYPES } from '../../constants/documentTypes';\nimport { HeaderText } from '../../components/atoms/header-text/header-text';\nimport Text from '../../components/atoms/text/text';\nimport { mustBeNumber, required } from '../../utils/validation';\n\n\nfunction Home() {\n  const history = useHistory();\n\n  return (\n    <Layout homePage>\n      <div className=\"home\">\n        <div className=\"home__form\">\n          <Form\n            initialValues={{\n              documentType: 'DNI'\n            }}\n            onSubmit={(values) => {\n              const request: PersonalData = {\n                birthDate: values.birthdate,\n                documentType: values.documentType,\n                documentNumber: values.documentNumber,\n                phone: values.phone\n              }\n              getPersonalData(request).then((response) => {\n                history.push(\"/familiars\");\n              })\n            }}\n            render={({ handleSubmit, values, invalid }) => (\n              <form onSubmit={handleSubmit}>\n                <HeaderText\n                  fontSize=\"small\"\n                  firstText=\"ObtÃ©n tu\"\n                  secondText=\" seguro ahora\"\n                ></HeaderText>\n                <Text>\n                  Ingresa los datos para comenzar.\n                </Text>\n                <Field name=\"documentType\" >\n                  {props => (\n                    <>\n                      <SelectInput options={DOCUMENT_TYPES} meta={props.meta} {...props.input} placeholder=\"Nro de Documento\">\n                        <Field name=\"documentNumber\" validate={required}>\n                          {props => (\n                            <Input meta={props.meta} {...props.input} placeholder=\"Nro de Documento\" />\n                          )}\n                        </Field>\n                      </SelectInput>\n                    </>\n                  )}\n                </Field>\n                <Field name=\"birthdate\" validate={required}>\n                  {props => (\n                    <Input type=\"date\" meta={props.meta} {...props.input} placeholder=\"Fecha de nacimiento\" />\n                  )}\n                </Field>\n                <Field name=\"phone\" validate={mustBeNumber}>\n                  {props => (\n                    <Input meta={props.meta} {...props.input} placeholder=\"Celular\" />\n                  )}\n                </Field>\n\n                <Field name=\"acceptPolicied\" validate={required}>\n                  {props => (\n                    <Checkbox\n                      name={props.input.name}\n                      checked={props.input.value}\n                      onChange={props.input.onChange}\n                      text=\"Acepto la PolÃ­tica de ProtecciÃ³n de Datos Personales y los TÃ©rminos y Condiciones.\"\n                    ></Checkbox>\n                  )}\n                </Field>\n                <Field name=\"acceptComCommertials\" validate={required}>\n                  {props => (\n                    <Checkbox\n                      name={props.input.name}\n                      checked={props.input.value}\n                      onChange={props.input.onChange}\n                      text=\"Acepto la PolÃ­tica de EnvÃ­o de Comunicaciones Comerciales.\"\n                    ></Checkbox>\n                  )}\n                </Field>\n\n                <Button disabled={invalid} type=\"submit\">\n                  Comencemos\n                </Button>\n              </form>\n            )}\n          />\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport default Home;\n","D:\\rimac\\src\\containers\\add-familiars\\add-familiars.tsx",["114","115","116","117"],"import React from 'react';\nimport './add-familiars.scss';\nimport logo from '../../images/logo.png';\nimport family from '../../images/family.png';\nimport square from '../../images/square.png';\nimport { Field, Form } from 'react-final-form';\nimport Input from '../../components/atoms/input/input';\nimport Button from '../../components/atoms/button/button';\nimport Radio from '../../components/atoms/radio/radio';\nimport { useHistory } from 'react-router-dom';\nimport { getCurrentUser } from '../../utils/services';\nimport { RELATIVES } from '../../constants/relatives';\nimport SelectInput from '../../components/atoms/select-input/select-input';\nimport { FieldArray } from 'react-final-form-arrays';\nimport arrayMutators from 'final-form-arrays'\nimport Layout from '../../components/atoms/layout/layout';\nimport BackStep from '../../components/atoms/back-step/back-step';\nimport { HeaderText } from '../../components/atoms/header-text/header-text';\nimport Text from '../../components/atoms/text/text';\nimport { DOCUMENT_TYPES } from '../../constants/documentTypes';\nimport { required } from '../../utils/validation';\n\nconst Condition = ({ when, is, children }: {\n  when: string,\n  is: any,\n  children: React.ReactNode\n}) => (\n  <Field name={when} subscription={{ value: true }}>\n    {({ input: { value } }) => (value === is ? children : null)}\n  </Field>\n)\nfunction AddFamiliars() {\n  const history = useHistory();\n  const user = getCurrentUser();\n\n  function addRelative() {\n\n  }\n\n  return (\n    <Layout >\n      <div className=\"add-familiars\">\n        <div className=\"add-familiars__form\">\n          <BackStep\n            path={''}\n            step={1}\n            totalSteps={7}\n          />\n          <HeaderText\n            firstText=\"Hola, \"\n            secondText={user?.name.first}\n          />\n          <Text>\n            Valida que los datos sean correctos.\n          </Text>\n          <Form\n            initialValues={{\n              documentNumber: user?.documentNumber,\n              name: user?.name.first,\n              paternalSurName: user?.name.last,\n              maternalSurName: '',\n              documentType: user?.documentType,\n              gender: user?.gender,\n              birthDate: user?.birthDate,\n              relativeType: '1'\n            }}\n            onSubmit={(values) => {\n              //debugger\n              history.push(\"/choose-plan\");\n            }}\n            mutators={{\n              // potentially other mutators could be merged here\n              ...arrayMutators\n            }}\n            render={({ handleSubmit, values, form: { mutators: { push } } }) => (\n              <form onSubmit={handleSubmit}>\n                <h2>Datos personales del titular</h2>\n                <Field name=\"documentType\" >\n                  {props => (\n                    <>\n                      <SelectInput options={DOCUMENT_TYPES} meta={props.meta} {...props.input} placeholder=\"Nro de Documento\">\n                        <Field name=\"documentNumber\" validate={required}>\n                          {props => (\n                            <Input meta={props.meta} {...props.input} placeholder=\"Nro de Documento\" />\n                          )}\n                        </Field>\n                      </SelectInput>\n                    </>\n                  )}\n                </Field>\n                <Field name=\"name\">\n                  {props => (\n                    <Input\n                      meta={props.meta}\n                      {...props.input}\n                      placeholder=\"Nombres\"\n                    />\n                  )}\n                </Field>\n                <Field name=\"paternalSurName\">\n                  {props => (\n                    <Input\n                      meta={props.meta}\n                      {...props.input}\n                      placeholder=\"Apellido Paterno\"\n                    />\n                  )}\n                </Field>\n                <Field name=\"maternalSurName\">\n                  {props => (\n                    <Input\n                      meta={props.meta}\n                      {...props.input}\n                      placeholder=\"Apellido Materno\"\n                    />\n                  )}\n                </Field>\n                <Field name=\"birthDate\">\n                  {props => (\n                    <Input\n                      type=\"date\"\n                      meta={props.meta}\n                      {...props.input}\n                      placeholder=\"Fecha de nacimiento\"\n                    />\n                  )}\n                </Field>\n                <Text>\n                  Genero\n                </Text>\n                <Field name=\"gender\" type=\"radio\" value=\"M\" component={({ input, text }) => <Radio {...input} text={text} />} text=\"Femenino\"></Field>\n                <Field name=\"gender\" type=\"radio\" value=\"F\" component={({ input, text }) => <Radio {...input} text={text} />} text=\"Masculino\"></Field>\n                <Text>\n                  Â¿A quiÃ©n vamos a asegurar?\n                </Text>\n                <Field name=\"insurance\" type=\"radio\" value=\"onlyMe\" component={({ input, text }) => <Radio {...input} text={text} />} text=\"Solo a mÃ­\"></Field>\n                <Field name=\"insurance\" type=\"radio\" value=\"meAndMyFamily\" component={({ input, text }) => <Radio {...input} text={text} />} text=\"A mÃ­ y a mi familia\"></Field>\n                <Condition when=\"insurance\" is=\"meAndMyFamily\">\n                  <Text>\n                    Datos de los familiares\n                  </Text>\n                  <div>\n                    <Field name=\"relativeType\" >\n                      {props => (\n                        <>\n                          <SelectInput options={RELATIVES} meta={props.meta} {...props.input} placeholder=\"Vinculo\">\n                            <Field name=\"relativeBirthDate\" >\n                              {props => (\n                                <Input meta={props.meta} type=\"date\" {...props.input} placeholder=\"Fecha de Nacimiento\" />\n                              )}\n                            </Field>\n                          </SelectInput>\n                          <Button\n                            type=\"button\"\n                            onClick={() => {\n                              if(values.relativeType && values.relativeBirthDate ) {\n                                push('relatives', {\n                                  relative: values.relativeType,\n                                  birthdate: values.relativeBirthDate\n                                })\n                              }\n                            }}>Agregar</Button>\n                        </>\n                      )}\n                    </Field>\n                    <FieldArray name=\"relatives\">\n                      {({ fields }) =>\n                        fields.map((name, index) => (\n                          <div key={name}>\n                            <Field\n                              name={`${name}.relative`}\n                              component=\"input\"\n                              placeholder=\"First Name\"\n                            />\n                            <Field\n                              name={`${name}.birthdate`}\n                              component=\"input\"\n                              placeholder=\"Last Name\"\n                            />\n                            <span\n                              onClick={() => fields.remove(index)}\n                              style={{ cursor: 'pointer' }}\n                            >\n                              Eliminar\n                            </span>\n                          </div>\n                        ))\n                      }\n                    </FieldArray>\n                  </div>\n                </Condition>\n\n                <Button type=\"submit\">\n                  Comencemos\n                </Button>\n\n              </form>\n            )}\n          />\n        </div>\n      </div>\n    </Layout>\n\n  );\n}\n\nexport default AddFamiliars;\n","D:\\rimac\\src\\containers\\choose-plan\\choose-plan.tsx",[],"D:\\rimac\\src\\components\\atoms\\checkbox\\checkbox.tsx",[],"D:\\rimac\\src\\components\\atoms\\radio\\radio.tsx",[],"D:\\rimac\\src\\components\\atoms\\input\\input.tsx",[],"D:\\rimac\\src\\components\\atoms\\button\\button.tsx",[],"D:\\rimac\\src\\components\\molecules\\benefits\\benefits.tsx",[],"D:\\rimac\\src\\components\\atoms\\select-input\\select-input.tsx",[],"D:\\rimac\\src\\constants\\relatives.ts",[],"D:\\rimac\\src\\components\\atoms\\layout\\layout.tsx",[],"D:\\rimac\\src\\constants\\documentTypes.ts",[],"D:\\rimac\\src\\components\\atoms\\back-step\\back-step.tsx",["118"],"import React from 'react';\nimport { useHistory } from 'react-router';\nimport back from '../../../images/back.png';\nimport './back-step.scss';\n\ninterface BackStepProps {\n  path:string;\n  step: string | number;\n  totalSteps: string | number;\n}\n\nfunction BackStep({ path , step, totalSteps, ...rest }: BackStepProps) {\n  const history = useHistory()\n  function goBack() {\n    history.goBack();\n  }\n  return (\n    <div className=\"back-step\">\n      <img onClick={goBack} className=\"back-step__image\" src={back}/>\n      <div className=\"back-step__text\">\n        <span className=\"back-step__completed\">\n          PASO {step}\n        </span>\n        <span className=\"back-step__uncompleted\">\n          {' '} DE {totalSteps}\n        </span>\n      </div>\n    </div>\n  );\n}\n\nexport default BackStep;\n","D:\\rimac\\src\\components\\atoms\\header-text\\header-text.tsx",[],"D:\\rimac\\src\\components\\atoms\\text\\text.tsx",[],"D:\\rimac\\src\\utils\\validation.ts",[],"D:\\rimac\\src\\components\\organisms\\plans\\plans.tsx",["119"],"D:\\rimac\\src\\components\\organisms\\footer-plan\\footer-plan.tsx",["120"],"import React, { useState } from 'react';\nimport './footer-plan.scss';\nimport broder from '../../../images/broder.png'\n\n\nfunction FooterPlan() {\n  useState()\n  return <div className=\"footer-plan\">\n    <div className=\"footer-plan__services\">\n      <div>\n        <div className=\"footer-plan__review-text\">\n          Revisa nuestros\n        </div>\n        <div className=\"footer-plan__services-text\">\n          servicios y exclusiones\n        </div>\n      </div>\n      <div>\n        <img src={broder}/> \n      </div>\n    </div>\n  </div>\n}\n\nexport default FooterPlan","D:\\rimac\\src\\components\\organisms\\resume-plans\\resume-plans.tsx",["121","122"],"D:\\rimac\\src\\components\\organisms\\detail-plan\\detail-plan.tsx",["123"],"D:\\rimac\\src\\containers\\final-step\\final-step.tsx",["124","125"],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":16},{"ruleId":"130","severity":1,"message":"134","line":3,"column":8,"nodeType":"132","messageId":"133","endLine":3,"endColumn":12},{"ruleId":"130","severity":1,"message":"135","line":4,"column":8,"nodeType":"132","messageId":"133","endLine":4,"endColumn":14},{"ruleId":"130","severity":1,"message":"136","line":5,"column":8,"nodeType":"132","messageId":"133","endLine":5,"endColumn":14},{"ruleId":"130","severity":1,"message":"137","line":36,"column":12,"nodeType":"132","messageId":"133","endLine":36,"endColumn":23},{"ruleId":"138","severity":1,"message":"139","line":19,"column":7,"nodeType":"140","endLine":19,"endColumn":70},{"ruleId":"130","severity":1,"message":"141","line":1,"column":17,"nodeType":"132","messageId":"133","endLine":1,"endColumn":25},{"ruleId":"138","severity":1,"message":"139","line":19,"column":9,"nodeType":"140","endLine":19,"endColumn":28},{"ruleId":"130","severity":1,"message":"142","line":4,"column":7,"nodeType":"132","messageId":"133","endLine":4,"endColumn":13},{"ruleId":"130","severity":1,"message":"143","line":27,"column":11,"nodeType":"132","messageId":"133","endLine":27,"endColumn":27},{"ruleId":"130","severity":1,"message":"144","line":5,"column":11,"nodeType":"132","messageId":"133","endLine":5,"endColumn":26},{"ruleId":"130","severity":1,"message":"145","line":13,"column":9,"nodeType":"132","messageId":"133","endLine":13,"endColumn":13},{"ruleId":"138","severity":1,"message":"139","line":21,"column":11,"nodeType":"140","endLine":21,"endColumn":31},"no-native-reassign",["146"],"no-negated-in-lhs",["147"],"@typescript-eslint/no-unused-vars","'Benefits' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'family' is defined but never used.","'square' is defined but never used.","'addRelative' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'planes' is assigned a value but never used.","'ResumePlansProps' is defined but never used.","'DetailPlanProps' is defined but never used.","'user' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]